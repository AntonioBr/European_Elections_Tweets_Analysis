# Download prepared igraph file from github
url <- "https://github.com/andrie/cran-network-structure/blob/master/pdb/depGraph-CRAN.rds?raw=true"
datafile <- tempfile(fileext = ".rds")
download.file(url, destfile = datafile, mode = "wb")
gs <- read_graph("./mentions_network_language.graphml", format = c("graphml"))
# Remove all nodes with fewer than 50 edges
deg <- degree(gs, mode = "out")
idx <- (which(deg > 300))
gn <- induced.subgraph(gs, idx)
# Extract into data frame and plot
gd <- get.data.frame(gn, what = "edges")
simpleNetwork(gd, fontSize = 12)
library("networkD3")
library("igraph")
# Download prepared igraph file from github
url <- "https://github.com/andrie/cran-network-structure/blob/master/pdb/depGraph-CRAN.rds?raw=true"
datafile <- tempfile(fileext = ".rds")
download.file(url, destfile = datafile, mode = "wb")
gs <- read_graph("./mentions_network_language.graphml", format = c("graphml"))
# Remove all nodes with fewer than 50 edges
deg <- degree(gs, mode = "out")
idx <- (which(deg > 300))
gn <- induced.subgraph(gs, idx)
# Extract into data frame and plot
gd <- get.data.frame(gn, what = "edges")
simpleNetwork(gd, fontSize = 12)
library("networkD3")
library("igraph")
# Download prepared igraph file from github
url <- "https://github.com/andrie/cran-network-structure/blob/master/pdb/depGraph-CRAN.rds?raw=true"
datafile <- tempfile(fileext = ".rds")
download.file(url, destfile = datafile, mode = "wb")
gs <- read_graph("./mentions_network_language.graphml", format = c("graphml"))
# Remove all nodes with fewer than 50 edges
deg <- degree(gs, mode = "out")
idx <- (which(deg > 50))
gn <- induced.subgraph(gs, idx)
# Extract into data frame and plot
gd <- get.data.frame(gn, what = "edges")
simpleNetwork(gd, fontSize = 12)
library("networkD3")
library("igraph")
# Download prepared igraph file from github
url <- "https://github.com/andrie/cran-network-structure/blob/master/pdb/depGraph-CRAN.rds?raw=true"
datafile <- tempfile(fileext = ".rds")
download.file(url, destfile = datafile, mode = "wb")
gs <- read_graph("./mentions_network_language.graphml", format = c("graphml"))
# Remove all nodes with fewer than 50 edges
deg <- degree(gs, mode = "in")
idx <- (which(deg > 50))
gn <- induced.subgraph(gs, idx)
# Extract into data frame and plot
gd <- get.data.frame(gn, what = "edges")
simpleNetwork(gd, fontSize = 12)
simpleNetwork(gd, fontSize = 12, height = 600, width = "100%")
install.packages("htmltools")
install.packages("htmltools")
library(htmltools)
# can handle igraph directly
vivagraph(gn,height = 600,width = "100%")
install.packages("DiagrammeR")
library(htmltools)
library(DiagrammeR)
# can handle igraph directly
vivagraph(gn,height = 600,width = "100%")
library(DiagrammeR)
# can handle igraph directly
vivagraph(gn,height = 600,width = "100%")
# can handle igraph directly
vivagraph(gn,height = 600,width = "100%")
install.packages("visNetwork")
install.packages("visNetwork")
library(visNetwork)
# use visNetwork
# get a size for our nodes
V(gn)$size <- degree(gn) * 10
gn %>%
get.data.frame( what = "both" ) %>%
{
visNetwork(
nodes = data.frame(
id =  .[["vertices"]][,"name"]
,size =  .[["vertices"]][["size"]]
)
,edges = .[["edges"]]
,height = 600
,width = "100%"
)
} %>%
visOptions(highlightNearest = TRUE)
library("networkD3")
library("igraph")
# Download prepared igraph file from github
url <- "https://github.com/andrie/cran-network-structure/blob/master/pdb/depGraph-CRAN.rds?raw=true"
datafile <- tempfile(fileext = ".rds")
download.file(url, destfile = datafile, mode = "wb")
gs <- read_graph("./mentions_network_language.graphml", format = c("graphml"))
# Remove all nodes with fewer than 50 edges
deg <- degree(gs, mode = "in")
idx <- (which(deg > 50))
gn <- induced.subgraph(gs, idx)
# Extract into data frame and plot
gd <- get.data.frame(gn, what = "edges")
simpleNetwork(gd, fontSize = 12, height = 300, width = 300)
library("networkD3")
library("igraph")
gs <- read_graph("./mentions_network_language.graphml", format = c("graphml"))
# Remove all nodes with fewer than 50 edges
deg <- degree(gs, mode = "in")
idx <- (which(deg > 50))
gn <- induced.subgraph(gs, idx)
print(gn)
View(gd)
print(gs)
library("networkD3")
library("igraph")
gs <- read_graph("./mentions_network_language.graphml", format = c("graphml"))
# Remove all nodes with fewer than 50 edges
deg <- degree(gs["username"], mode = "in")
idx <- (which(deg > 50))
gn <- induced.subgraph(gs, idx)
# Extract into data frame and plot
gd <- get.data.frame(gn, what = "edges")
simpleNetwork(gd, fontSize = 12, height = 300, width = 300)
# Remove all nodes with fewer than 50 edges
deg <- degree(gs[1], mode = "in")
# Remove all nodes with fewer than 50 edges
deg <- degree(gs[username], mode = "in")
# Extract into data frame and plot
gd <- get.data.frame(gn, what = "username")
# Extract into data frame and plot
gd <- get.data.frame(gn, what = "both")
simpleNetwork(gd, fontSize = 12, height = 300, width = 300)
# Extract into data frame and plot
gd <- get.data.frame(gn, what = "edges")
simpleNetwork(gd, fontSize = 12, height = 300, width = 300)
# Extract into data frame and plot
gd <- get.data.frame(gn["username"], what = "edges")
# Extract into data frame and plot
gd <- get.data.frame(gn, what = "edges")
simpleNetwork(gd, fontSize = 12, height = 300, width = 300)
library(ndtv)
install.packages("ndtv")
library(ndtv)
install.packages("ndtv")
library(ndtv)
render.d3movie(gd)
render.d3movie(gs)
forceNetwork(Links = get.data.frame(gn, what = "edges"), Nodes = get.data.frame(gn, what = "vertex"),
Source = "source", Target = "target",
Value = "value", NodeID = "name",
Group = "group", opacity = 0.8)
forceNetwork(Links = get.data.frame(gn, what = "edges"), Nodes = get.data.frame(gn, what = "nodes"),
Source = "source", Target = "target",
Value = "value", NodeID = "name",
Group = "group", opacity = 0.8)
# Extract into data frame and plot
gd <- get.data.frame(gn, what = "vertex")
# Extract into data frame and plot
gd <- get.data.frame(gn, what = "vertices")
simpleNetwork(gd, fontSize = 12, height = 300, width = 300)
simpleNetwork(gd["username"], fontSize = 12, height = 300, width = 300)
# Extract into data frame and plot
gd <- get.data.frame(gn, what = "vertices")
simpleNetwork(gd["id"], fontSize = 12, height = 300, width = 300)
simpleNetwork(gd["id"], fontSize = 12, height = 300, width = 300)
simpleNetwork(gd["id"], fontSize = 12)
# Extract into data frame and plot
gd <- get.data.frame(gn, what = "edges")
simpleNetwork(gd, fontSize = 12, height = 20, width = 20)
forceNetwork(Links = get.data.frame(gn, what = "edges"), Nodes = get.data.frame(gn, what = "edges"),
Source = "source", Target = "target",
Value = "value", NodeID = "name",
Group = "group", opacity = 0.8)
forceNetwork(get.data.frame(gn, what = "edges"),
Source = "source", Target = "target",
Value = "value", NodeID = "name",
Group = "group", opacity = 0.8)
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
library("networkD3")
library("igraph")
gs <- read_graph("./mentions_network_language.graphml", format = c("graphml"))
# Remove all nodes with fewer than 50 edges
deg <- degree(gs, mode = "in")
idx <- (which(deg > 50))
gn <- induced.subgraph(gs, idx)
# Extract into data frame and plot
gd <- get.data.frame(gn, what = "edges")
simpleNetwork(gd, fontSize = 12, height = 20, width = 20)
library("networkD3")
library("igraph")
gs <- read_graph("./mentions_network_language.graphml", format = c("graphml"))
# Remove all nodes with fewer than 50 edges
deg <- degree(gs, mode = "in")
idx <- (which(deg > 50))
gn <- induced.subgraph(gs, idx)
# Extract into data frame and plot
gd <- get.data.frame(gn, what = "edges")
simpleNetwork(gd, fontSize = 12, height = 20, width = 20)
library("networkD3")
library("igraph")
gs <- read_graph("./mentions_network_language.graphml", format = c("graphml"))
# Remove all nodes with fewer than 50 edges
deg <- degree(gs, mode = "out")
idx <- (which(deg > 50))
gn <- induced.subgraph(gs, idx)
# Extract into data frame and plot
gd <- get.data.frame(gn, what = "edges")
simpleNetwork(gd, fontSize = 12, height = 20, width = 20)
runApp('Demo.R')
library("networkD3")
library("igraph")
gs <- read_graph("./mentions_network_language.graphml", format = c("graphml"))
# Remove all nodes with fewer than 50 edges
idx <- (which(deg > 50))
gn <- induced.subgraph(gs, idx)
# Extract into data frame and plot
gd <- get.data.frame(gn, what = "edges")
simpleNetwork(gd, fontSize = 12, height = 20, width = 20)
deg <- degree(gs, mode = "out")
library("networkD3")
library("igraph")
gs <- read_graph("./mentions_network_language.graphml", format = c("graphml"))
# Remove all nodes with fewer than 50 edges
deg <- degree(gs, mode = "out")
idx <- (which(deg > 50))
gn <- induced.subgraph(gs, idx)
# Extract into data frame and plot
gd <- get.data.frame(gn, what = "edges")
simpleNetwork(gd, fontSize = 12, height = 20, width = 20)
library("networkD3")
library("igraph")
gs <- read_graph("./mentions_network_language.graphml", format = c("graphml"))
# Remove all nodes with fewer than 50 edges
deg <- degree(gs, mode = "in")
idx <- (which(deg > 50))
gn <- induced.subgraph(gs, idx)
# Extract into data frame and plot
gd <- get.data.frame(gn, what = "edges")
simpleNetwork(gd, fontSize = 12, height = 20, width = 20)
library(shiny); runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
install.packages("DT")
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
remove.packages("DT")
remove.packages(DT)
library(shiny); runApp('Demo.R')
library(shiny); runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
EmotionalDB = as.data.frame((read.csv("./MainDB.csv")))
x <- EmotionalDB$Date
y <- EmotionalDB$Anger
plot(main="Emotions", x, y, type="l")
plot(main="Emotions", x, y, type="p")
EmotionalDB = as.data.frame((read.csv("./MainDB.csv")))
x <- EmotionalDB$Date
y <- EmotionalDB$Anger
plot(main="Emotions", x, y, type="p")
EmotionalDB = as.data.frame((read.csv("./MainDB.csv")))
x <- EmotionalDB$Date
y <- EmotionalDB$Anger
hist(main="Emotions", x, y, type="p")
plot(main="Emotions", x, y, type="p")
EmotionalDB = as.data.frame((read.csv("./MainDB.csv")))
x <- EmotionalDB$Date
y <- EmotionalDB$Trust
plot(main="Emotions", x, y, type="p")
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
o = names(EmotionalDB)
o = names(EmotionalDB)[1:]
o = list(names(EmotionalDB))[1:]
o = [names(EmotionalDB))][1:]
o = [names(EmotionalDB)]
o = as.list(names(EmotionalDB))
o = as.list(names(EmotionalDB))[1:]
o = (as.list(names(EmotionalDB))[1:])
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
fileInput("dataset", "Choose CSV File",
multiple = TRUE,
accept = c("text/csv",
"text/comma-separated-values,text/plain",
".csv")),
# Include clarifying text ----
#helpText(em("Note: This app requires file in csv format only!!")),
helpText(em("Note:Select all the inputs and click on button as given below to exectute the app")),
# Input: Checkbox if file has header ----
checkboxInput("header", "Header", TRUE),
# Input: Select separator ----
radioButtons("sep", "Separator",
choices = c(Comma = ",",
Semicolon = ";",
Tab = "\t"),
selected = ","),
selectInput("select", "Select columns to display", names(datasetInput), multiple = TRUE),
actionButton("update", "Update Data set", class = "btn-primary",style='padding:4px; font-size:120%')
),
# Show a plot of the generated distribution
mainPanel(
h2('The Mydata'),
dataTableOutput('mytable')
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
datasetInput <- eventReactive(input$update, {
validate(need(input$dataset != "", "Please select a data set in csv format only!!!"))# custom error message on opening the app
read.csv(input$dataset$datapath,
header = input$header,
sep = input$sep)
}, ignoreNULL = FALSE)
dataset <- reactive({
df_input<-datasetInput()
df_input$x<-NULL
df_input
})
output$mytable = renderDataTable({
columns = names(dataset)
if (!is.null(input$select)) {
columns = input$select
}
dataset[,columns,drop=FALSE]
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
fileInput("dataset", "Choose CSV File",
multiple = TRUE,
accept = c("text/csv",
"text/comma-separated-values,text/plain",
".csv")),
# Include clarifying text ----
#helpText(em("Note: This app requires file in csv format only!!")),
helpText(em("Note:Select all the inputs and click on button as given below to exectute the app")),
# Input: Checkbox if file has header ----
checkboxInput("header", "Header", TRUE),
# Input: Select separator ----
radioButtons("sep", "Separator",
choices = c(Comma = ",",
Semicolon = ";",
Tab = "\t"),
selected = ","),
selectInput("select", "Select columns to display", names(datasetInput), multiple = TRUE),
actionButton("update", "Update Data set", class = "btn-primary",style='padding:4px; font-size:120%')
),
# Show a plot of the generated distribution
mainPanel(
h2('The Mydata'),
dataTableOutput('mytable')
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
datasetInput <- eventReactive(input$update, {
validate(need(input$dataset != "", "Please select a data set in csv format only!!!"))# custom error message on opening the app
read.csv(input$dataset$datapath,
header = input$header,
sep = input$sep)
}, ignoreNULL = FALSE)
dataset <- reactive({
df_input<-datasetInput()
df_input$x<-NULL
df_input
})
output$mytable = renderDataTable({
columns = names(dataset)
if (!is.null(input$select)) {
columns = input$select
}
dataset[,columns,drop=FALSE]
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
fileInput("dataset", "Choose CSV File",
multiple = TRUE,
accept = c("text/csv",
"text/comma-separated-values,text/plain",
".csv")),
# Include clarifying text ----
#helpText(em("Note: This app requires file in csv format only!!")),
helpText(em("Note:Select all the inputs and click on button as given below to exectute the app")),
# Input: Checkbox if file has header ----
checkboxInput("header", "Header", TRUE),
# Input: Select separator ----
radioButtons("sep", "Separator",
choices = c(Comma = ",",
Semicolon = ";",
Tab = "\t"),
selected = ","),
selectInput("select", "Select columns to display", names(datasetInput), multiple = TRUE),
actionButton("update", "Update Data set", class = "btn-primary",style='padding:4px; font-size:120%')
),
# Show a plot of the generated distribution
mainPanel(
h2('The Mydata'),
dataTableOutput('mytable')
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
datasetInput <- eventReactive(input$update, {
validate(need(input$dataset != "", "Please select a data set in csv format only!!!"))# custom error message on opening the app
read.csv(input$dataset$datapath,
header = input$header,
sep = input$sep)
}, ignoreNULL = FALSE)
dataset <- reactive({
df_input<-datasetInput()
df_input$x<-NULL
df_input
})
output$mytable = renderDataTable({
columns = names(dataset)
if (!is.null(input$select)) {
columns = input$select
}
dataset[,columns,drop=FALSE]
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('~/Desktop/Untitled.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
runApp('Demo.R')
